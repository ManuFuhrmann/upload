kind: pipeline
name: CI-phpunit

steps:
- name: phpunit-composer-install
  image: composer
  commands:
  - composer install

- name: phpunit-test
  image: php:8
  commands:
  - vendor/bin/phpunit --configuration phpunit.xml
  depends_on:
  - phpunit-composer-install

- name: phpunit-discord-failure
  image: plugins/webhook
  settings:
    urls:
      from_secret: discord_webhook_url
    content_type: application/json
    template: |
      {
        "content": "",
        "embeds": [
          {
            "title": "❌ **PHPUnit Tests Failed**",
            "description": "PHPUnit tests failed for branch '{{build.branch}}'",
            "color": 15158332,
            "fields": [
              {
                "name": "Build",
                "value": "#{{build.number}} - {{repo.name}}",
                "inline": true
              },
              {
                "name": "Branch",
                "value": "{{build.branch}}",
                "inline": true
              },
              {
                "name": "Commit",
                "value": "{{build.commit}}"
              },
              {
                "name": "Failed Step",
                "value": "PHPUnit Tests"
              },
              {
                "name": "Author",
                "value": "{{build.author}}",
                "inline": true
              }
            ],
            "footer": {
              "text": "Check the build logs for details"
            }
          }
        ]
      }
  when:
    status: [failure]
  depends_on:
  - phpunit-test

---

kind: pipeline
name: CI-phpstan

steps:
- name: phpstan-composer-install
  image: composer
  commands:
  - composer install

- name: phpstan-analyse
  image: php:8
  commands:
  - vendor/bin/phpstan analyse src --error-format=json --no-progress > phpstan-results.json
  - cat phpstan-results.json
  depends_on:
  - phpstan-composer-install

- name: phpstan-discord-failure
  image: plugins/webhook
  settings:
    urls:
      from_secret: discord_webhook_url
    content_type: application/json
    template: |
      {
        "content": "",
        "embeds": [
          {
            "title": "❌ **PHPStan Analysis Failed**",
            "description": "PHPStan static analysis failed for branch '{{build.branch}}'",
            "color": 15158332,
            "fields": [
              {
                "name": "Build",
                "value": "#{{build.number}} - {{repo.name}}"
              },
              {
                "name": "Branch",
                "value": "{{build.branch}}",
                "inline": true
              },
              {
                "name": "Commit",
                "value": "{{build.commit}}",
                "inline": true
              },
              {
                "name": "Failed Step",
                "value": "PHPStan Analysis",
                "inline": true
              }
            ],
            "footer": {
              "text": "Check the build logs for details"
            }
          }
        ]
      }
  when:
    status: [failure]
  depends_on:
  - phpstan-composer-install

---

kind: pipeline
name: CD-push

depends_on:
- CI-phpunit
- CI-phpstan

trigger:
  event:
    - tag

steps:
- name: determine-tags
  image: alpine:latest
  commands:
  - |
    CLEAN_TAG=${DRONE_TAG#v}
    echo "CLEAN_TAG=$CLEAN_TAG" > .env
    
    if echo "$CLEAN_TAG" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
      echo "IS_RELEASE=true" >> .env
      echo "This is a release version"
    else
      echo "IS_RELEASE=false" >> .env
      echo "This is a pre-release version"
    fi

- name: build-and-push
  image: plugins/docker
  settings:
    registry: docker.io
    repo: dein-username/dein-app
    auto_tag: true
    auto_tag_suffix: ${DRONE_COMMIT_SHA:0:7}
    username:
      from_secret: docker_username
    password:
      from_secret: docker_password
  when:
    event: tag

- name: push-latest
  image: plugins/docker  
  settings:
    registry: docker.io
    repo: dein-username/dein-app
    tags: latest
    username:
      from_secret: docker_username
    password:
      from_secret: docker_password
  commands:
  - |
    source .env
    if [ "$IS_RELEASE" != "true" ]; then
      echo "⏭️ Skipping latest for pre-release"
      exit 0
    fi
    echo "🚀 Pushing latest tag"
  when:
    event: tag
